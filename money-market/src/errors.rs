pub const ERROR_CONTROLLER_REJECTED_MINT: &[u8] = b"mint has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_BORROW: &[u8] = b"borrow has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_BORROW_REPAYMENT: &[u8] = b"borrow repayment has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_LIQUIDATION: &[u8] = b"liquidation has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_LIQUIDATION_SEIZE: &[u8] = b"liquidation seize has been rejected by Controller";
pub const ERROR_INSUFFICIENT_BALANCE: &[u8] = b"insufficient balance in protocol";
pub const ERROR_MARKET_NOT_FRESH: &[u8] = b"accrual not up to date, market is not fresh";
pub const ERROR_UNDEFINED_CONTROLLER: &[u8] = b"undefined Controller smart contract";
pub const ERROR_UNDEFINED_INTEREST_RATE_MODEL: &[u8] = b"undefined Interest Rate Model smart contract";
pub const ERROR_UNDEFINED_STAKING_SC: &[u8] = b"undefined Staking smart contract";
pub const ERROR_RESERVE_FACTOR_TOO_HIGH: &[u8] = b"reserve factor too high";
pub const ERROR_STAKE_FACTOR_TOO_HIGH: &[u8] = b"stake factor too high";
pub const ERROR_PROTOCOL_SEIZE_SHARE_TOO_HIGH: &[u8] = b"protocol seize share too high";
pub const ERROR_LIQUIDATION_INCENTIVE_TOO_HIGH: &[u8] = b"liquidity incentive too high";
pub const ERROR_LIQUIDATION_INCENTIVE_TOO_LOW: &[u8] = b"liquidity incentive too low";
pub const ERROR_CLOSE_FACTOR_TOO_LOW: &[u8] = b"close factor too low";
pub const ERROR_CLOSE_FACTOR_TOO_HIGH: &[u8] = b"close factor too high";
pub const ERROR_ACCRUAL_TIME_THRESHOLD_TOO_HIGH: &[u8] = b"accrual time threshold too high";
pub const ERROR_NON_VALID_INTEREST_RATE_MODEL_SC: &[u8] = b"not a valid interest rate model smart contract";
pub const ERROR_NON_VALID_CONTROLLER_SC: &[u8] = b"not a valid controller smart contract";
pub const ERROR_NON_VALID_STAKING_SC: &[u8] = b"not a valid staking smart contract";
pub const ERROR_NON_VALID_TRUSTED_MINTER_SC: &[u8] = b"not a valid trusted minter smart contract";
pub const ERROR_AMOUNT_EXCEEDS_REVENUE: &[u8] = b"amount to withdraw exceeds money market revenue part of the reserves";
pub const ERROR_CANNOT_BE_ADDRESS_ZERO: &[u8] = b"cannot be address zero";
pub const ERROR_INVALID_UNDERLYING_ID: &[u8] = b"invalid underlying identifier";
pub const ERROR_HATOM_TOKEN_ALREADY_ISSUED: &[u8] = b"Hatom token has been already issued";
pub const ERROR_ISSUE_HATOM_TOKEN_FIRST: &[u8] = b"must issue Hatom token first";
pub const ERROR_HATOM_TOKEN_ONGOING_ISSUANCE: &[u8] = b"Hatom token is being issued";
pub const ERROR_INITIAL_SUPPLY_ALREADY_MINTED: &[u8] = b"Hatom token initial supply already minted";
pub const ERROR_INVALID_UNDERLYING_PAYMENT: &[u8] = b"invalid payment underlying";
pub const ERROR_INVALID_TOKEN_PAYMENT: &[u8] = b"invalid payment token";
pub const ERROR_NOT_ENOUGH_TOKENS_TO_REDEEM: &[u8] = b"not enough tokens to redeem";
pub const ERROR_AMOUNT_MUST_BE_GREATER_THAN_ZERO: &[u8] = b"amount has to be greater than zero";
pub const ERROR_NOT_ENOUGH_UNDERLYING: &[u8] = b"provided insufficient amount of underlying to translate to at least one Hatom token";
pub const ERROR_INITIAL_FX_MUST_BE_GREATER_THAN_ZERO: &[u8] = b"initial exchange rate must be greater than zero";
pub const ERROR_CANNOT_LIQUIDATE_YOURSELF: &[u8] = b"cannot liquidate yourself";
pub const ERROR_TOO_MUCH_LIQUIDATION: &[u8] = b"too much liquidation, the borrower does not have enough collateral to seize";
pub const ERROR_NOT_ENOUGH_SEIZED_TOKENS: &[u8] = b"not enough seized tokens";
pub const ERROR_ADDRESSES_MUST_DIFFER: &[u8] = b"addresses must be different";
pub const ERROR_NOT_A_TRUSTED_MINTER: &[u8] = b"not a trusted minter";
pub const ERROR_ALREADY_TRUSTED_MINTER: &[u8] = b"minter has already been trusted";
pub const ERROR_MARKET_SHOULD_BE_ACTIVE: &[u8] = b"market should be active";
pub const ERROR_MARKET_SHOULD_BE_INACTIVE: &[u8] = b"market should be inactive";
pub const ERROR_INVALID_MARKET_STATE: &[u8] = b"invalid market state";
