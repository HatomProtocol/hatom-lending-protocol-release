pub const ERROR_NOT_A_MARKET_OBSERVER: &[u8] = b"not a whitelisted market observer";
pub const ERROR_NOT_FACILITATOR: &[u8] = b"not a facilitator";
pub const ERROR_MISSING_MARKET_ROLES: &[u8] = b"missing market roles";
pub const ERROR_CONTROLLER_REJECTED_MINT: &[u8] = b"mint has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_BORROW: &[u8] = b"borrow has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_BORROW_REPAYMENT: &[u8] = b"borrow repayment has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_LIQUIDATION: &[u8] = b"liquidation has been rejected by Controller";
pub const ERROR_CONTROLLER_REJECTED_LIQUIDATION_SEIZE: &[u8] = b"liquidation seize has been rejected by Controller";
pub const ERROR_MARKET_NOT_FRESH: &[u8] = b"accrual not up to date, market is not fresh";
pub const ERROR_UNDEFINED_USH_MINTER_SC: &[u8] = b"undefined minter smart contract";
pub const ERROR_UNDEFINED_DISCOUNT_RATE_MODEL: &[u8] = b"undefined Discount Rate Model smart contract";
pub const ERROR_UNDEFINED_STAKING_SC: &[u8] = b"undefined Staking smart contract";
pub const ERROR_STAKE_FACTOR_TOO_HIGH: &[u8] = b"stake factor too high";
pub const ERROR_PROTOCOL_SEIZE_SHARE_TOO_HIGH: &[u8] = b"protocol seize share too high";
pub const ERROR_LIQUIDATION_INCENTIVE_TOO_HIGH: &[u8] = b"liquidity incentive too high";
pub const ERROR_LIQUIDATION_INCENTIVE_TOO_LOW: &[u8] = b"liquidity incentive too low";
pub const ERROR_CLOSE_FACTOR_TOO_HIGH: &[u8] = b"close factor too high";
pub const ERROR_CLOSE_FACTOR_TOO_LOW: &[u8] = b"close factor too low";
pub const ERROR_ACCRUAL_TIME_THRESHOLD_TOO_HIGH: &[u8] = b"accrual time threshold too high";
pub const ERROR_INVALID_USH_MINTER_SC: &[u8] = b"invalid USH minter smart contract";
pub const ERROR_INVALID_DISCOUNT_RATE_MODEL_SC: &[u8] = b"invalid interest rate model smart contract";
pub const ERROR_INVALID_CONTROLLER_SC: &[u8] = b"invalid controller smart contract";
pub const ERROR_INVALID_STAKING_SC: &[u8] = b"invalid staking smart contract";
pub const ERROR_INVALID_TRUSTED_MINTER_SC: &[u8] = b"invalid trusted minter smart contract";
pub const ERROR_AMOUNT_EXCEEDS_REVENUE: &[u8] = b"amount to withdraw exceeds money market revenue part of the reserves";
pub const ERROR_CANNOT_BE_ADDRESS_ZERO: &[u8] = b"cannot be address zero";
pub const ERROR_INVALID_USH_PAYMENT: &[u8] = b"invalid USH payment";
pub const ERROR_INVALID_HUSH_PAYMENT: &[u8] = b"invalid HUSH payment";
pub const ERROR_NOT_ENOUGH_HUSH_TO_REDEEM: &[u8] = b"not enough HUSH to redeem";
pub const ERROR_HATOM_USH_ALREADY_ISSUED: &[u8] = b"Hatom USH has been already issued";
pub const ERROR_ISSUE_HATOM_USH_FIRST: &[u8] = b"must issue Hatom USH first";
pub const ERROR_HATOM_USH_ONGOING_ISSUANCE: &[u8] = b"Hatom USH is being issued";
pub const ERROR_AMOUNT_MUST_BE_GREATER_THAN_ZERO: &[u8] = b"amount has to be greater than zero";
pub const ERROR_AMOUNT_MUST_BE_ZERO: &[u8] = b"amount has to be zero";
pub const ERROR_DIVISION_BY_ZERO: &[u8] = b"division by zero";
pub const ERROR_CANNOT_LIQUIDATE_YOURSELF: &[u8] = b"cannot liquidate yourself";
pub const ERROR_TOO_MUCH_LIQUIDATION: &[u8] = b"too much liquidation, the borrower does not have enough collateral to seize";
pub const ERROR_NOT_ENOUGH_SEIZED_TOKENS: &[u8] = b"not enough seized tokens";
pub const ERROR_NOT_ENOUGH_USH: &[u8] = b"provided insufficient amount of USH to translate to at least one Hatom USH";
pub const ERROR_ADDRESSES_MUST_DIFFER: &[u8] = b"addresses must be different";
pub const ERROR_MARKET_NOT_DEPRECATED: &[u8] = b"market is not deprecated";
pub const ERROR_MARKET_SHOULD_BE_ACTIVE: &[u8] = b"market should be active";
pub const ERROR_MARKET_SHOULD_BE_INACTIVE: &[u8] = b"market should be inactive";
pub const ERROR_MARKET_HAS_FINALIZED_STATE: &[u8] = b"market has finalized state";
pub const ERROR_INVALID_MARKET_STATE: &[u8] = b"invalid market state";
pub const ERROR_HATOM_USH_NOT_ELIGIBLE_AS_COLLATERAL: &[u8] = b"Hatom USH not eligible as collateral";
pub const ERROR_CALLER_MUST_BE_CONTROLLER_SC: &[u8] = b"caller must be Controller smart contract";
pub const ERROR_CALLER_MUST_BE_STAKING_SC: &[u8] = b"caller must be Staking smart contract";
pub const ERROR_UNDEFINED_BORROW_RATE: &[u8] = b"undefined borrow rate";
pub const ERROR_EQUAL_BORROW_RATE: &[u8] = b"new borrow rate is equals current borrow rate";
pub const ERROR_BORROW_RATE_UPDATE_TOO_SOON: &[u8] = b"borrow rate update too soon";
pub const ERROR_INVALID_INITIAL_BORROW_RATE: &[u8] = b"invalid initial borrow rate";
pub const ERROR_INVALID_BORROW_RATE_UPDATE: &[u8] = b"invalid borrow rate update";
pub const ERROR_BORROW_RATE_CANNOT_BE_ZERO: &[u8] = b"borrow rate cannot be zero";
pub const ERROR_MARKET_HAS_BORROWERS: &[u8] = b"market still has borrowers";
pub const ERROR_ACCOUNT_NOT_BORROWER: &[u8] = b"account is not a borrower";
pub const ERROR_NOT_A_TRUSTED_MINTER: &[u8] = b"not a trusted minter";
pub const ERROR_ALREADY_TRUSTED_MINTER: &[u8] = b"minter has already been trusted";
pub const ERROR_UNEXPECTED_MARKET_AT_DISCOUNT_RATE_MODEL_SC: &[u8] = b"unexpected market at Discount Rate Model smart contract";
